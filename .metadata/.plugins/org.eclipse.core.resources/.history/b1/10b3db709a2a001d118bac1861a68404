package localhost.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import localhost.storage.StorageService;

@Controller //컨트롤러 선언
public class FileUploadController {
	private final StorageService storageService;
	
	@Autowired //자동으로 객체 "타입"에 해당하는 Bean 적용
	public FileUploadController(StorageService storageService) {
		this.storageService = storageService;
	}
	
	@GetMapping("/") 
	public String listUploadedFiles(Model modle) throw IOException
	{
		model.addAttribute("file",storageService.loadAll().map(path ->
		MvcUriComponentsBuilder.formMethodName(FileUploadController.class,
				"severFile",path.getFileName().toString()).build().toUri().toString()).collect(Collect.toList()));
		return "uploadForm";
	}
	@GetMapping("files/{filename:.+}")
	@ResponseBody
	public ResponseEntitiy<Resource> serveFile(@PathVariable Stringfilename){
		
		Resource file = storageService.loadAsResource(filename);
		return
				ResourceEntity.ok().header(HttpHeaders.CONTENT_DISPOSITION,"attachment; filename=\""+file.getFilename()+"\"").body(file);
	}
	
	@PostMapping("/")
	public String handleFileUpload(@RequestParam("file")
	MultipartFile file, RedirectAttributes redirectAttributes){
		storageService.store(file);
		redirectAttribute.addFlashAttribute("massage",file.getOriginalFilename()+"!");
		return "redirect:/";
	}
	
	@ExceptionHandler(StorageFileNotFoundException.class)
	public ResponseEntity<?>
	handelStorageFileNotFound(StorageFileNotFoundException exc){
		return ResponseEntity.notFound().build();
	}

}
